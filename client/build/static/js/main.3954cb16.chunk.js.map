{"version":3,"sources":["components/Recipe/index.js","components/Keys/index.js","App.js","serviceWorker.js","index.js"],"names":["Recipe","title","calories","image","ingredients","map","res","text","src","alt","ID","KEY","App","useState","recipes","setRecipes","search","setSearch","query","setQuery","useEffect","console","log","getRecipes","a","fetch","response","json","data","hits","className","onSubmit","e","preventDefault","type","value","onChange","target","recipe","label","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"0OAiBeA,G,MAfA,SAAC,GAA2C,IAA1CC,EAAyC,EAAzCA,MAAOC,EAAkC,EAAlCA,SAAUC,EAAwB,EAAxBA,MAAOC,EAAiB,EAAjBA,YACrC,OACI,oCACI,4BAAKH,GACL,2CACKG,EAAYC,KAAI,SAAAC,GAAG,OAChB,4BAAKA,EAAIC,UAGjB,uCAAaL,GACb,yBAAKM,IAAML,EAAOM,IAAI,QCZrBC,EAAG,WAEHC,EAAI,mCCuEFC,EApEH,WAAO,IAAD,EAEcC,mBAAS,IAFvB,mBAETC,EAFS,KAEAC,EAFA,OAGYF,mBAAS,IAHrB,mBAGTG,EAHS,KAGDC,EAHC,OAIUJ,mBAAS,OAJnB,mBAITK,EAJS,KAIFC,EAJE,KAMhBC,qBAAU,WACRC,QAAQC,IAAIZ,GACZW,QAAQC,IAAIX,GACZY,MACC,CAACL,IAEJ,IAAMK,EAAU,uCAAG,8BAAAC,EAAA,sEACMC,MAAM,mCAAD,OAAoCP,EAApC,mBAAoDR,EAApD,oBAAkEC,IAD7E,cACXe,EADW,gBAEEA,EAASC,OAFX,OAEXC,EAFW,OAGjBP,QAAQC,IAAIM,EAAKC,MACjBd,EAAWa,EAAKC,MAJC,2CAAH,qDAuBhB,OACE,yBAAKC,UAAY,OACf,0BACEA,UAAU,cACVC,SAVY,SAAAC,GAChBA,EAAEC,iBACFd,EAASH,GACTC,EAAU,MASN,2BACEa,UAAU,eACVI,KAAK,OACLC,MAAOnB,EACPoB,SApBa,SAAAJ,GACnBf,EAAUe,EAAEK,OAAOF,UAqBf,4BACEL,UAAU,aACVI,KAAK,UAFP,WAOF,yBAAKJ,UAAU,UACdhB,EAAQT,KAAI,SAAAiC,GAAM,OACjB,kBAAC,EAAD,CACErC,MAAOqC,EAAOA,OAAOC,MACrBrC,SAAUoC,EAAOA,OAAOpC,SACxBC,MAAOmC,EAAOA,OAAOnC,MACrBC,YAAakC,EAAOA,OAAOlC,iBAN/B,OC/CcoC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLnC,QAAQmC,MAAMA,EAAMC,a","file":"static/js/main.3954cb16.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Recipe = ({title, calories, image, ingredients}) => {\r\n    return (\r\n        <>\r\n            <h1>{title}</h1>\r\n            <ol>Ingredients:\r\n                {ingredients.map(res => (\r\n                    <li>{res.text}</li>\r\n                    ))}\r\n            </ol>\r\n            <p>Calories:{calories}</p>\r\n            <img src ={image} alt=''></img>\r\n        </>\r\n    )\r\n};\r\n\r\nexport default Recipe;","export const ID='8e57f888'\r\n\r\nexport const KEY='b8bd857d26da14154c0b83e1e9f8d5b0'","import React, { useEffect, useState } from 'react';\nimport './App.css';\nimport Recipe from './components/Recipe';\nimport { ID, KEY } from './components/Keys';\n\nconst App = () => {\n\n  const [recipes, setRecipes] = useState([]);\n  const [search, setSearch] = useState('');\n  const [query, setQuery] = useState('pie');\n\n  useEffect(() => {\n    console.log(ID);\n    console.log(KEY);\n    getRecipes();\n  }, [query]);\n\n  const getRecipes = async () => {\n    const response = await fetch(`https://api.edamam.com/search?q=${query}&app_id=${ID}&app_key=${KEY}`);\n    const data = await response.json();\n    console.log(data.hits);\n    setRecipes(data.hits);\n\n    // Using Promises\n    // fetch(exampleReq)\n    //   .then(data => {\n    //     response.json(data);\n    // })\n  };\n\n  const updateSearch = e => {\n    setSearch(e.target.value);\n  };\n\n  const getSearch = e => {\n    e.preventDefault();\n    setQuery(search);\n    setSearch('');\n  };\n\n  return (\n    <div className = 'App'>\n      <form\n        className='search-form'\n        onSubmit={getSearch}\n      >\n        <input\n          className='search-input'\n          type='text'\n          value={search}\n          onChange={updateSearch}\n        ></input>\n        <button\n          className='search-btn'\n          type='submit' \n        >\n          Search\n        </button>\n      </form>\n      <div className='recipe'>\n      {recipes.map(recipe => (\n        <Recipe\n          title={recipe.recipe.label}\n          calories={recipe.recipe.calories}\n          image={recipe.recipe.image}\n          ingredients={recipe.recipe.ingredients}\n        ></Recipe>\n      ))};\n      </div>\n    </div>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}